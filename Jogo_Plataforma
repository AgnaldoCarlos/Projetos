// Trabalho desenvolvido para apresentação na Universidade

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Jogo</title>
    <style>
       body{background-color: rgb(93, 187, 250)}
      canvas {
        background-color: wheat;
        border: 1px solid black;
      }
    </style>
  </head>
  <body id="body">
    <canvas id="canvas" width="1300" height="620"></canvas>
    <button id="resetButton">Reset</button>
    <script>
        // Definindo variáveis do jogo
        let canvas = document.getElementById("canvas");
        let ctx = canvas.getContext("2d");
        let speed = 5; // velocidade do jogo
        let obstacleWidth = 30; // largura do obstáculo
        let obstacleHeight = 55; // altura do obstáculo
        let timeBetweenObstacles = 1200; // tempo entre cada obstáculo
        let playerWidth = 50; // largura do jogador
        let playerHeight = 80; // altura do jogador
        let playerX = 70; // posição inicial do jogador na horizontal
        let playerY = canvas.height - (playerHeight - playerWidth / 2) - 10; // posição inicial do jogador na vertical
        let obstacleInterval = null;
        let drawInterval = null;
        let speedb = 5;
        let jumpSpeed = 50;
        let isJumping = false;
        let jumpHeight = 100;
        let jumpEndPosition = 550;
        let score = 0;
        let headRadius = playerWidth / 6;
        let isWalking = false;
        let footOffset = 0;
        

        // define as cores
let skinColor = "#F6C49D";
let shirtColor = "#3B6BAF";
let pantsColor = "#51493B";
let shoeColor = "#000000";
        

let player = {
  x: playerX,
  y: playerY,
  width: 30,
  height: playerHeight - playerWidth / 2,
  radius: playerWidth / 3,
  jumpSpeed: jumpSpeed,
  
  fireballs: []
  
  
};
let obstacles = [];
let initialX = player.x;
let isFalling = false;
let fallSpeed = 0;
let gravity = 0.5;


// ............... J U M P ..................

document.addEventListener("keydown", event => {
  if (event.code === "ArrowUp" && !isJumping && !isFalling) {
    isJumping = true;
    jump();
  }
});

function jump() {
  player.y -= jumpSpeed;
  jumpSpeed -= 1;

  if (jumpSpeed === 0) {
    isFalling = true;
    fall();
  } else {
    requestAnimationFrame(jump);
  }
}

function fall() {
  player.y += fallSpeed;
  fallSpeed += gravity;

  if (player.y >= jumpEndPosition) { // verifica se jogador ultrapassou a posição final do pulo
    player.y = jumpEndPosition; // posiciona o jogador na posição final
    isJumping = false;
    isFalling = false;
    jumpSpeed = 15;
    fallSpeed = 0;
  } else {
    requestAnimationFrame(fall);
  }
}

// ............... DRAW BACKGROUND ..................

function draw() {
  const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
  gradient.addColorStop(0, '#87CEEB'); // cor do céu azul claro
  gradient.addColorStop(1, '#FFFFFF'); // cor das nuvens brancas
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvas.width, canvas.height);}


// ............... DRAW PLAYER ..................

function drawPlayer(player) {
  
// define a altura da grama
const grassHeight = canvas.height * 0.01;

// desenha o céu
const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height+1000);
skyGradient.addColorStop(0, '#87ceeb');
skyGradient.addColorStop(1, '#f5f5f5');
ctx.fillStyle = skyGradient;
ctx.fillRect(0, 0, canvas.width, canvas.height);

// desenha a grama
const grassGradient = ctx.createLinearGradient(0, canvas.height - grassHeight, 0, canvas.height);
grassGradient.addColorStop(0, '#2e8b57');
grassGradient.addColorStop(1, '#3cb371');
ctx.fillStyle = grassGradient;
ctx.fillRect(0, canvas.height - grassHeight, canvas.width, grassHeight);

// desenha as nuvens
ctx.fillStyle = "rgba(255, 255, 255, 0.8)"; // cor das nuvens brancas

ctx.beginPath();
ctx.arc(120, 100, 30, 0, 2 * Math.PI);
ctx.arc(150, 90, 40, 0, 2 * Math.PI);
ctx.arc(180, 100, 30, 0, 2 * Math.PI);
ctx.arc(150, 120, 20, 0, 2 * Math.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.arc(400, 80, 20, 0, 2 * Math.PI);
ctx.arc(430, 70, 30, 0, 2 * Math.PI);
ctx.arc(460, 80, 20, 0, 2 * Math.PI);
ctx.arc(430, 90, 15, 0, 2 * Math.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.arc(550, 120, 25, 0, 2 * Math.PI);
ctx.arc(580, 110, 35, 0, 2 * Math.PI);
ctx.arc(610, 120, 25, 0, 2 * Math.PI);
ctx.arc(580, 130, 20, 0, 2 * Math.PI);
ctx.fill();
ctx.closePath();

// desenha o sol
ctx.fillStyle = "rgb(255, 200, 0)"; // cor do sol amarelo
ctx.beginPath();
ctx.arc(canvas.width * 0.8, 100, 60, 0, 2 * Math.PI);
ctx.fill();
ctx.closePath();

// desenha a capa
const capeX = player.x - player.radius * 0.7;
const capeY = player.y + player.height - player.radius * 0.5;
const capeWidth = player.radius * 1.9;
const capeHeight = player.radius * 2;
const capeRotation = Math.sin(Date.now() / 100) * 0.2; // gera uma animação de rotação

ctx.beginPath();
ctx.fillStyle = "red";
ctx.moveTo(capeX, capeY);
ctx.quadraticCurveTo(capeX - capeWidth / 2, capeY - capeHeight / 2, capeX, capeY - capeHeight);
ctx.arc(capeX, capeY - capeHeight / 2, capeWidth / 2, Math.PI, 0, false);
ctx.quadraticCurveTo(capeX + capeWidth / 2, capeY - capeHeight / 2, capeX, capeY);
ctx.fill();
ctx.closePath();

// animação de voo da capa
ctx.save();
ctx.translate(capeX + capeWidth / 2, capeY - capeHeight / 2);
ctx.rotate(capeRotation);
ctx.translate(-capeX - capeWidth / 2, -capeY + capeHeight / 2);

ctx.beginPath();
ctx.fillStyle = "red";
ctx.moveTo(capeX, capeY);
ctx.quadraticCurveTo(capeX - capeWidth / 2, capeY - capeHeight / 2, capeX, capeY - capeHeight);
ctx.arc(capeX, capeY - capeHeight / 2, capeWidth / 2, Math.PI, 0, false);
ctx.quadraticCurveTo(capeX + capeWidth / 2, capeY - capeHeight / 2, capeX, capeY);
ctx.fill();
ctx.closePath();
ctx.restore();


  // desenha a cabeça
ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(player.x, player.y - player.radius - player.headRadius, player.headRadius, 0, 2 * Math.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(player.x, player.y, player.radius, 0, 2 * Math.PI);
ctx.fill();
ctx.closePath();

// desenha o corpo
ctx.beginPath();
ctx.strokeStyle = "black";
ctx.lineWidth = 4;
ctx.moveTo(player.x, player.y);
ctx.lineTo(player.x, player.y + player.height);
ctx.stroke();
ctx.closePath();

// desenha os braços
ctx.beginPath();
ctx.moveTo(player.x, player.y + player.height / 2);
ctx.lineTo(player.x + player.width / 2, player.y + player.height / 2);
ctx.stroke();
ctx.closePath();

// desenha as pernas
if (isWalking) {
// ajusta a posição dos pés para cima e para baixo
const footY = player.y + player.height + player.width / 2 + footOffset;
ctx.beginPath();
ctx.moveTo(player.x, player.y + player.height);
ctx.lineTo(player.x - player.width / 2, footY);
ctx.moveTo(player.x, player.y + player.height);
ctx.lineTo(player.x + player.width / 2, footY);
ctx.stroke();
ctx.closePath();

// alterna o valor da variável footOffset para animar os pés
if (footOffset === 0) {
  footOffset = player.width / 4;
} else {
  footOffset = 0;
}
} else {
// desenha as pernas normais
ctx.beginPath();
ctx.moveTo(player.x, player.y + player.height);
ctx.lineTo(player.x - player.width / 2, player.y + player.height + player.width / 2);
ctx.moveTo(player.x, player.y + player.height);
ctx.lineTo(player.x + player.width / 2, player.y + player.height + player.width / 2);
ctx.stroke();
ctx.closePath();
}
}

function drawFireballs(player) {
  for (let i = 0; i < player.fireballs.length; i++) {
    // atualiza a posição X da fireball a cada frame
    player.fireballs[i].x += player.fireballs[i].speed;
    
    // desenha a chama da fireball
    let flameGradient = ctx.createRadialGradient(player.fireballs[i].x, player.fireballs[i].y, 0, player.fireballs[i].x, player.fireballs[i].y, player.fireballs[i].radius);
    flameGradient.addColorStop(0, "rgba(255, 200, 0, 1)");
    flameGradient.addColorStop(0.5, "rgba(255, 100, 0, 0.7)");
    flameGradient.addColorStop(1, "rgba(255, 0, 0, 0)");
    
    ctx.beginPath();
    ctx.arc(player.fireballs[i].x, player.fireballs[i].y, player.fireballs[i].radius, 0, 2 * Math.PI);
    ctx.fillStyle = flameGradient;
    ctx.fill();
    ctx.closePath();

    // atualiza a posição Y da chama da fireball para criar o efeito de deslocamento
    let flameShift = player.fireballs[i].radius / 2;
    let flameGradientShift = ctx.createRadialGradient(player.fireballs[i].x, player.fireballs[i].y + flameShift, 0, player.fireballs[i].x, player.fireballs[i].y + flameShift, player.fireballs[i].radius);
    flameGradientShift.addColorStop(0, "rgba(255, 200, 0, 1)");
    flameGradientShift.addColorStop(0.5, "rgba(255, 100, 0, 0.7)");
    flameGradientShift.addColorStop(1, "rgba(255, 0, 0, 0)");
    
    ctx.beginPath();
    ctx.arc(player.fireballs[i].x, player.fireballs[i].y + flameShift, player.fireballs[i].radius, 0, 2 * Math.PI);
    ctx.fillStyle = flameGradientShift;
    ctx.fill();
    ctx.closePath();
  }
}

// adiciona um evento de teclado para detectar quando a tecla de espaço é pressionada
document.addEventListener("keydown", function(event) {
if (event.code === "Space") {
shootFireball();
}
});

function shootFireball() {
  console.log("Fireball shot!"); // adicionado console.log para debug
  let fireball = {
    x: player.x + player.width,
    y: player.y + player.height / 2,
    radius: 10,
    speed: 10
  };
  player.fireballs.push(fireball);
}


// ............... AÇÃO DE ANDAR ..................

// função para alternar entre andar e parar
function toggleWalking() {
  isWalking = !isWalking;
}

// chama a função toggleWalking a cada 500ms para animar os pés
setInterval(toggleWalking, 1);

// ............... DRAW OBSTACULO ..................

function drawBird(obstacle) {
  ctx.beginPath();
  ctx.fillStyle = "brown";
  ctx.moveTo(obstacle.x - obstacleWidth / 2, obstacle.y - obstacleHeight / 2);
  ctx.quadraticCurveTo(obstacle.x - obstacleWidth / 3, obstacle.y - obstacleHeight, obstacle.x, obstacle.y);
  ctx.quadraticCurveTo(obstacle.x + obstacleWidth / 3, obstacle.y - obstacleHeight, obstacle.x + obstacleWidth / 2, obstacle.y - obstacleHeight / 2);
  ctx.quadraticCurveTo(obstacle.x + obstacleWidth / 3, obstacle.y, obstacle.x, obstacle.y + obstacleHeight / 2);
  ctx.quadraticCurveTo(obstacle.x - obstacleWidth / 3, obstacle.y, obstacle.x - obstacleWidth / 2, obstacle.y - obstacleHeight / 2);
  ctx.closePath();
  ctx.fill();

  ctx.beginPath();
  ctx.fillStyle = "white";
  ctx.moveTo(obstacle.x - obstacleWidth / 8, obstacle.y + obstacleHeight / 6);
  ctx.lineTo(obstacle.x - obstacleWidth / 4, obstacle.y);
  ctx.lineTo(obstacle.x, obstacle.y + obstacleHeight / 6);
  ctx.lineTo(obstacle.x + obstacleWidth / 4, obstacle.y);
  ctx.lineTo(obstacle.x + obstacleWidth / 8, obstacle.y + obstacleHeight / 6);
  ctx.fill();

  ctx.beginPath();
  ctx.fillStyle = "brown";
  ctx.moveTo(obstacle.x - obstacleWidth / 2, obstacle.y + obstacleHeight / 4);
  ctx.quadraticCurveTo(obstacle.x - obstacleWidth / 4, obstacle.y + obstacleHeight / 2, obstacle.x, obstacle.y + obstacleHeight / 4);
  ctx.quadraticCurveTo(obstacle.x + obstacleWidth / 4, obstacle.y + obstacleHeight / 2, obstacle.x + obstacleWidth / 2, obstacle.y + obstacleHeight / 4);
  ctx.quadraticCurveTo(obstacle.x + obstacleWidth / 3, obstacle.y + obstacleHeight / 2, obstacle.x, obstacle.y + obstacleHeight);
  ctx.quadraticCurveTo(obstacle.x - obstacleWidth / 3, obstacle.y + obstacleHeight / 2, obstacle.x - obstacleWidth / 2, obstacle.y + obstacleHeight / 4);
  ctx.closePath();
  ctx.fill();
}

function drawObstacle(obstacle) {
  if (obstacle.type === "cactus") {
    ctx.beginPath();
    ctx.fillStyle = "#3B5323"; // verde escuro
    ctx.moveTo(obstacle.x, obstacle.y);
    ctx.lineTo(obstacle.x + (obstacleWidth / 2) + 2, obstacle.y + obstacleHeight + 2);
    ctx.lineTo(obstacle.x - (obstacleWidth / 2) - 2, obstacle.y + obstacleHeight + 2);
    ctx.closePath();
    ctx.fill();

    ctx.beginPath();
    ctx.fillStyle = "#6B8E23"; // verde claro
    ctx.moveTo(obstacle.x, obstacle.y);
    ctx.lineTo(obstacle.x + (obstacleWidth / 2) + 2, obstacle.y + obstacleHeight / 2);
    ctx.lineTo(obstacle.x - (obstacleWidth / 2) - 2, obstacle.y + obstacleHeight / 2);
    ctx.closePath();
    ctx.fill();

    ctx.beginPath();
    ctx.strokeStyle = "brown";
    ctx.lineWidth = 5;
    ctx.moveTo(obstacle.x, obstacle.y + 5 + obstacleHeight + 5);
    ctx.lineTo(obstacle.x, obstacle.y + obstacleHeight * 1.00);
    ctx.stroke();
    ctx.closePath();

  } else if (obstacle.type === "bird") {
    drawBird(obstacle);
  }
  
}

// ............... GERAR OBSTACULO ..................

function generateObstacle() {
  let obstacleX = canvas.width + obstacleWidth / 4;
  let obstacleY = canvas.height - obstacleHeight - 10;
  let obstacleType = Math.random() < 0.6 ? "cactus" : "bird";
  let obstacle;
  
  if (obstacleType === "cactus") {
    obstacle = { x: obstacleX, y: obstacleY, type: "cactus" };
  } else {
    obstacle = { x: obstacleX , y: obstacleY, type: "bird" };
  }
  
  obstacles.push(obstacle);
  
  // generate a new obstacle after a random time interval
  let randomInterval = Math.random() * (timeBetweenObstacles - 100) + 100; // random interval between 500ms and the set timeBetweenObstacles
  obstacleInterval = setTimeout(generateObstacle, randomInterval);
}

function moveObstacles() {
for (let i = 0; i < obstacles.length; i++) {
obstacles[i].x -= speed;
}
}

// ............... COLISAO ..................

function checkCollision() {
  for (let i = 0; i < obstacles.length; i++) {
    // verificar colisão com player
    if (
      (player.x < obstacles[i].x + 0 &&
      player.x + playerWidth > obstacles[i].x + 25 &&
      player.y < obstacles[i].y + obstacleHeight &&
      player.y + playerHeight > obstacles[i].y + 15) ||
      (player.x === obstacles[i].x && player.y === obstacles[i].y)
    ) {
      endGame();
    }
    
    // verificar colisão com fireballs
    for (let j = 0; j < player.fireballs.length; j++) {
      if (
        player.fireballs[j].x + player.fireballs[j].radius > obstacles[i].x &&
        player.fireballs[j].x - player.fireballs[j].radius < obstacles[i].x + obstacleWidth  &&
        player.fireballs[j].y + player.fireballs[j].radius > obstacles[i].y &&
        player.fireballs[j].y - player.fireballs[j].radius < obstacles[i].y + obstacleHeight
      ) {
        if (obstacles[i].type === "cactus") {
          player.fireballs.splice(j, 1);
        } else if (obstacles[i].type === "bird") {
          player.fireballs.splice(j, 1);
          obstacles.splice(i, 1);
          score += 5; // adiciona pontos no score
        }
      }
    }
  }
}


// ............... DRAW SCORE ..................

function drawScore() {
  ctx.font = "25px Arial";
  ctx.fillStyle = "BLACK";
  ctx.fillText("Score: " + score.toFixed(0), 8, 35);
}

// ............... UPDATE SCORE / ENDGAME / RESET GAME ..................

function updateScore() {
score += (0.1);
}

function endGame() {
  clearInterval(drawInterval);
  clearTimeout(obstacleInterval);
  alert("Admita que você não é capaz!!!! Sua pontuação foi de apenas: " + score.toFixed(0));
}

function resetGame() {
clearInterval(drawInterval);
clearTimeout(obstacleInterval);
score = 0;
obstacles = [];
player.x = playerX;
player.y = playerY;
animate();
}

function animate() {
  drawInterval = setInterval(() => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawPlayer(player);
    drawFireballs(player); // adicionado aqui
    moveObstacles();
    obstacles.forEach(obstacle => drawObstacle(obstacle));
    checkCollision();
    drawScore();
    updateScore();
  }, 10);
  obstacleInterval = setTimeout(generateObstacle, timeBetweenObstacles );
}

animate();

document.getElementById("resetButton").addEventListener("click", resetGame);
</script>

</body>
</html>
